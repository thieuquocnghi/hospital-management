type Root {
  id: Int!
  email: String!
  firstname: String!
  lastname: String!
}

type Admin {
  id: Int!
  firstname: String!
  lastname: String!
  email: String!
}

type User {
  id: Int!
  email: String!
  firstname: String!
  lastname: String!
  token: String!
}

type Doctor {
  id: Int!
  firstname: String!
  lastname: String!
  email: String!
  phone: String!
  gender: String!
  dob: String!
  specialization: String!
}

type Patient {
  id: Int!
  firstname: String!
  lastname: String!
  email: String!
  phone: String!
  dob: String!
  gender: String!
  occupation: String!
  address: String!
  nationality: String!
  marital_status: String!
  religion: String!
  ethnicity: String!
  history: [History!]! @hasMany
}

type History {
  id: Int!
  patient_id: Int!
  doctor_id: Int!
  presenting_complaint: String!
  presenting_complaint_history: String!
  differential_diagnosis: String!
  diagnosis: String!
  prescription: String!
  surgical_history: String!
  social_history: String!
  patient: Patient @belongsTo
  doctor: Doctor @hasOne
}

type Query {
  """
  **Get an admin by id or email**
  **Headers**
  Authorization: Root token
  """
  admin(id: Int @eq, email: String @eq): Admin
    @find
    @middleware(checks: ["authUser:Root"])

  """
  **Get admins**
  **Headers**
  Authorization: Root token
  """
  admins: [Admin!]! @middleware(checks: ["authUser:Root"]) @paginate

  """
  **Get a patient by id or email**
  **Headers**
  Authorization: Root, Admin or Doctor token
  """
  patient(id: Int @eq, email: String @eq): Patient
    @find
    @middleware(checks: ["authUser:Root,Admin,Doctor"])

  """
  **Get patients**
  **Headers**
  Authorization: Root token
  """
  patients: [Patient!]! @paginate @middleware(checks: ["authUser:Root"])

  """
  **Get a doctor by id or email**
  **Headers**
  Authorization: Root, Admin, Doctor token
  """
  doctor(id: Int @eq, email: String @eq): Doctor
    @find
    @middleware(checks: ["authUser:Root,Admin,Doctor"])

  """
  **Get doctors**
  **Headers**
  Authorization: Root token
  """
  doctors: [Doctor!]! @paginate @middleware(checks: ["authUser:Root"])
}

type Mutation {
  """
  **key:** verificationKey sent to the email.
  **password:** Password for root user. Must be six characters or more
  **user:** `Root`, `Admin`, `Doctor`, `Patient`
  """
  verifyUser(
    key: String! @rules(apply: ["required"])
    password: String! @rules(apply: ["required", "min:6"]) @bcrypt
    user: String! @rules(apply: ["required", "in:Root,Admin,Patient,Doctor"])
  ): String @field(resolver: "VerifyUser@resolve")

  """
  **email:** User email
  **password:** User password
  **user:** `Root`, `Admin`, `Patient`, `Doctor`
  """
  login(
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required"])
    user: String! @rules(apply: ["required", "in:Root,Admin,Patient,Doctor"])
  ): User @field(resolver: "AuthMutator@login")

  """
  **email:** Admin email
  **firstname:** Firstname
  **lastname:** Lastname

  **Headers**
  - Authorization: Root token
  """
  addAdmin(
    firstname: String! @rules(apply: ["required", "alpha"])
    lastname: String! @rules(apply: ["required", "alpha"])
    email: String! @rules(apply: ["required", "email", "unique:admins"])
  ): Admin
    @middleware(checks: ["authUser:Root", "targetUser:Admin"])
    @field(resolver: "UserMutator@addUser")

  """
  **email:** Doctor's email
  **firstname:** Firstname
  **lastname:** Lastname
  **phone:** Phone number
  **gender:** `male`, `female`, `other`
  **dob:** Date of birth (dd-mm-yyyy)
  **specialization:** Specialization

  **Headers**
  - Authorization: Root token
  """
  addDoctor(
    firstname: String! @rules(apply: ["required", "alpha"])
    lastname: String! @rules(apply: ["required", "alpha"])
    phone: String! @rules(apply: ["required", "min:10"])
    gender: String! @rules(apply: ["required", "in:male,female,other"])
    dob: String!
      @rules(apply: ["required", "date_format:d-m-Y", "before:today"])
    specialization: String! @rules(apply: ["required", "alpha"])
    email: String! @rules(apply: ["required", "email", "unique:doctors"])
  ): Doctor
    @middleware(checks: ["authUser:Admin", "targetUser:Doctor"])
    @field(resolver: "UserMutator@addUser")
  """
  **email:** Patient email *(optional)*
  **firstname:** Firstname
  **lastname:** Lastname
  **phone:** Phone number
  **gender:** `male`, `female`, `other`
  **dob:** Patient's date of birth. *dd-mm-yyyy*
  **occupation:** Occupation
  **address:** Address
  **nationality:** Nationality
  **marital_status:** Marital status. `single`, `married`, `divorced` or `widowed`
  **religion:** Religion
  **ethnicity:** Ethnicity

  **Headers**  
  - Authorization: Root token
  """
  addPatient(
    firstname: String! @rules(apply: ["required", "alpha"])
    lastname: String! @rules(apply: ["required", "alpha"])
    email: String
      @rules(apply: ["nullable", "sometimes", "email", "unique:patients"])
    phone: String! @rules(apply: ["required", "min:10", "unique:patients"])
    dob: String!
      @rules(apply: ["required", "date_format:d-m-Y", "before:today"])
    gender: String! @rules(apply: ["required", "in:male,female,other"])
    occupation: String! @rules(apply: ["required", "string"])
    address: String! @rules(apply: ["required"])
    nationality: String! @rules(apply: ["required", "alpha"])
    marital_status: String!
      @rules(apply: ["required", "in:single, married, divorced, widowed"])
    religion: String! @rules(apply: ["required", "alpha"])
    ethnicity: String! @rules(apply: ["required", "alpha"])
  ): Patient
    @middleware(checks: ["authUser:Admin", "targetUser:Patient"])
    @field(resolver: "UserMutator@addUser")

  """
  **patient_id:** Patient id
  **presenting_complaint:** Presenting complaint
  **presenting_complaint_history:** Presenting complaint history
  **differential_diagnosis:** Differential diagnosis
  **diagnosis:** Diagnosis
  **prescription:** Prescription
  **surgical_history:** Surgical history
  **social_history:** Social history

  **Headers**  
  - Authorization: Root token
  """
  addHistory(
    patient_id: Int!
      @rules(apply: ["required", "exists:patients,id", "numeric"])
    presenting_complaint: String! @rules(apply: ["required", "string"])
    presenting_complaint_history: String! @rules(apply: ["required", "string"])
    differential_diagnosis: String! @rules(apply: ["required", "string"])
    diagnosis: String! @rules(apply: ["required", "string"])
    prescription: String! @rules(apply: ["required", "string"])
    surgical_history: String! @rules(apply: ["required", "string"])
    social_history: String @rules(apply: ["required", "string"])
  ): History
    @middleware(checks: ["authUser:Doctor"])
    @field(resolver: "HistoryMutator@addHistory")
}
